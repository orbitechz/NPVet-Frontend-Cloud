name: Pipeline CI/CD Frontend Angular

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  id-token: write

jobs:
  testes:
    runs-on: ubuntu-latest
    name: Execução de Testes Automatizados
    steps:
      - name: Checkout do Código Fonte
        uses: actions/checkout@v4

      - name: Configuração do Ambiente Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalação de Dependências
        run: npm install

      - name: Execução de Testes Automatizados
        run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

  # Job de Build e Push para o ambiente de STAGING
  build-and-push-staging:
    name: Build e Push da Imagem (Staging)
    needs: testes
    # Executa para as branches de develop e staging
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código Fonte
        uses: actions/checkout@v4

      - name: Autenticar no Google Cloud (Staging)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

      - name: Configurar Docker para o Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build e Push para o Artifact Registry (Staging)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Constrói a tag usando o PROJECT_ID de staging e a tag da branch
          tags: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_STAGING }}/npvet-repo/npvet-frontend-cloud:${{ github.ref_name }}

  # Job de Build e Push para o ambiente de PRODUÇÃO
  build-and-push-production:
    name: Build e Push da Imagem (Produção)
    needs: testes
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código Fonte
        uses: actions/checkout@v4

      - name: Autenticar no Google Cloud (Produção)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PRODUCTION }}

      - name: Configurar Docker para o Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build e Push para o Artifact Registry (Produção)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Constrói a tag usando o PROJECT_ID de produção e a tag 'latest'
          tags: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PRODUCTION }}/npvet-repo/npvet-frontend-cloud:latest

  # Jobs de deploy agora dependem dos seus respectivos jobs de build
  deploy-to-staging:
    name: Deploy em Staging
    needs: build-and-push-staging # Depende do build de staging
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    steps:
      - name: Autenticar e Configurar gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

      - name: Configurar kubectl
        run: |
          gcloud container clusters get-credentials npvet-cluster \
            --zone=us-central1-a \
            --project=${{ secrets.GCP_PROJECT_ID_STAGING }}

      - name: Reiniciar o deployment do Frontend
        run: kubectl -n npvet-staging rollout restart deployment npvet-frontend

  deploy-to-production:
    name: Deploy em Produção
    needs: build-and-push-production # Depende do build de produção
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Autenticar e Configurar gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_PRODUCTION }}

      - name: Configurar kubectl
        run: |
          gcloud container clusters get-credentials npvet-cluster \
            --zone=us-central1-a \
            --project=${{ secrets.GCP_PROJECT_ID_PRODUCTION }}

      - name: Reiniciar o deployment do Frontend
        run: kubectl -n npvet-prod rollout restart deployment npvet-frontend